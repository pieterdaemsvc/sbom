name: docker_build_container
run-name: docker build 🏗️
on:
  push:
    paths:
      - example_docker/**
      - .github/workflows/sbom.yml
  workflow_dispatch:
env:
# defines environment variables that are available to all jobs in the workflow
  APP_IMAGE: ghcr.io/${{ github.repository }}/example-docker
  APP_COMMIT_SHA: "${{ github.event.pull_request.head.sha || github.sha }}"
jobs:
  container:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Require write permission to Fetch an federated identity token.
      contents: read # Require read permission to access the repository contents.
      packages: write # Require write permission to publish docker image to package.
      attestations: write # Require write permission to publish attestation to package.
    outputs:
      image: ${{ env.APP_IMAGE}}
      digest: ${{ steps.docker_build.outputs.digest }}
    steps:
        - name: git clone application code
          uses: actions/checkout@v4

        - name: docker login github packages
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: volvo-cars
            password: ${{ secrets.GITHUB_TOKEN}}
        

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
          with:
            cache-binary: true
           
        # - name: Docker meta
        #   id: meta
        #   uses: docker/metadata-action@v5.6.1
        #   with:
        #     # list of Docker images to use as base name for tags
        #     images: |
        #         ${{ env.APP_IMAGE}}
        #     # generate Docker tags based on the following events/attributes
        #     tags: |
        #         type=raw,value=${{ github.sha }}
        #         type=raw,value=latest
        #   env:
        #     DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest
        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v6
          with:
            platforms: linux/amd64
            context: ./example_docker
            file: ./example_docker/Dockerfile
            push: true
            load: false
            tags: ${{ env.APP_IMAGE}}:latest
            cache-from: type=gha,mode=max,timeout=${{ env.CACHE_TIMEOUT}}
            cache-to: type=gha,mode=max,ignore-error=true,timeout=${{ env.CACHE_TIMEOUT}}
            provenance: mode=max
            sbom: false
          env: #https://github.com/marketplace/actions/build-and-push-docker-images#environment-variables
            DOCKER_BUILD_CHECKS_ANNOTATIONS: "true"
            DOCKER_BUILD_SUMMARY: "true"
            DOCKER_BUILD_RECORD_UPLOAD: "true"
            CACHE_TIMEOUT: 10m
        
        # generates the sbom for the container image
        - uses: anchore/sbom-action@v0
          with:
            image: "${{ env.APP_IMAGE}}@${{ steps.docker_build.outputs.digest }}"
            artifact-name: sbom.spdx
            output-file: ./sbom.spdx
        # # attests the container image with the sbom and push it to the registry
        # - name: Generate SBOM attestation
        #   uses: actions/attest-sbom@v1
        #   with:
        #     subject-name: ${{ env.APP_IMAGE}}
        #     subject-digest: ${{ steps.docker_build.outputs.digest }}
        #     sbom-path: ./sbom.spdx
        #     push-to-registry: true


        #adds the sbom to the pipeline arttifacts 
        - uses: anchore/sbom-action/publish-sbom@v0
          with:
              sbom-artifact-match: ".*\\.spdx$"

        #attests the container image with the docker build provenance and push the provenance to the registry
        - name: Generate artifact attestation
          uses: actions/attest-build-provenance@v2
          with:
            subject-name: ${{ env.APP_IMAGE}}
            subject-digest: ${{ steps.docker_build.outputs.digest }}
            push-to-registry: false # not needed, the attestation is  already uploaded to the sigstore instance (in case of private repo it is saved in the github private sigstore instance)
            show-summary: true
  verify_provenance_attestation:
    runs-on: ubuntu-latest
    needs: container
    steps:
      - name: docker login github packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: volvo-cars
          password: ${{ secrets.GITHUB_TOKEN}}
      - name: Verify provenance attestation
        run: |
          gh attestation verify \
            oci://${{ needs.container.outputs.image }}@${{ needs.container.outputs.digest }} \
            --repo ${{ github.repository_owner }}/${{ github.event.repository.name }} \
            --predicate-type https://slsa.dev/provenance/v1 \
            --format json | jq .
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # verify_sbom_attestation:
  #   runs-on: ubuntu-latest
  #   needs: container
  #   steps:
  #     - name: docker login github packages
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: volvo-cars
  #         password: ${{ secrets.GITHUB_TOKEN}}
  #     - name: Verify sbom attestation
  #       run: |
  #           gh attestation verify \
  #             oci://${{ needs.container.outputs.image }}@${{ needs.container.outputs.digest }} \
  #             --repo ${{ github.repository_owner }}/${{ github.event.repository.name }} \
  #             --predicate-type https://spdx.dev/Document/v2.3 \
  #             --format json  | jq .
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
  check_sbom:
    runs-on: ubuntu-latest
    needs: container
    steps:
      - name: docker login github packages
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: volvo-cars
          password: ${{ secrets.GITHUB_TOKEN}}
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom.spdx
          path: "${{ github.workspace}}/artifacts"
      # scans sbon using grype
      # check documentation for supported packages and libraries https://github.com/anchore/scan-action 
      - name: Scan SBOM
        id: scan
        uses: anchore/scan-action@v6
        with:
          sbom: "${{ github.workspace}}/artifacts/sbom.spdx"
          fail-build: true
          severity-cutoff: critical
          grype-version: "v0.87.0"
          output-format: table
          cache-db: true
          output-file: ${{ github.workspace }}/artifacts/cyclonedx.table
      - name: process grype scan results
        if: always()
        run: |
          #!/bin/bash

          # Input and output file paths
          INPUT_FILE="${{ github.workspace }}/artifacts/cyclonedx.table"
          MARKDOWN_FILE="${{ github.workspace }}/artifacts/cyclonedx.md"

          # Step 1: Convert the .table file directly to Markdown format
          {
          echo "| NAME                | INSTALLED                | FIXED-IN             | TYPE  | VULNERABILITY   | SEVERITY   |"
          echo "|---------------------|--------------------------|----------------------|-------|-----------------|------------|"
          awk 'NR > 1 {
              # Split the line into fields based on whitespace
              name = $1;
              installed = $2;
              # Handle "FIXED-IN" column with potential multi-word values like "(won`t fix)"
              if ($3 ~ /^\(/ && $(NF-3) ~ /fix\)$/) {
                  fixed_in = $3 " " $4 " " $5;
                  type = $6;
                  vulnerability = $7;
                  severity = $8;
              } else {
                  fixed_in = ($3 ~ /^[a-zA-Z]/ ? "" : $3);
                  type = ($3 ~ /^[a-zA-Z]/ ? $3 : $4);
                  vulnerability = ($3 ~ /^[a-zA-Z]/ ? $4 : $5);
                  severity = ($3 ~ /^[a-zA-Z]/ ? $5 : $6);
              }

              # Print the fields in Markdown table format
              printf "| %-20s | %-24s | %-20s | %-5s | %-15s | %-10s |\n", name, installed, fixed_in, type, vulnerability, severity;
          }' "$INPUT_FILE"
          } > "$MARKDOWN_FILE"

          # Output success message
          echo "Markdown table saved to $MARKDOWN_FILE"
      - name: get output
        if: always()
        run: |
          cat ${{ github.workspace }}/artifacts/cyclonedx.md >> $GITHUB_STEP_SUMMARY